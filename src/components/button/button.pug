mixin button(params = {})
  -
    const {
      type="button",
      buttonName="button",
      link="",
      size="",
      textColor="gray",
      buttonVariation="",
      disabled=false
    } =  params
    const sizes = ["small", "stretching", "large"]
    const colors = ["purple", "gray", "white"]

    const mainClass = "button"
    const buttonTag = link ? 'a' : 'button'
    const buttonSizeModifier = sizes.includes(size) ? `button__inner_size_${size}` : ""
    const textColorModifier = colors.includes(textColor) ? `button__inner_text-color_${textColor}` : ""
    const buttonInlineModifier = buttonVariation === "inline" ? "button_inline" : ""
    const buttonFillModifier = buttonVariation === "fillWhite" ? "button__inner_fill_white" : ""
    const textDecorationModifier = "button_no-text-decoration"
    
    const buttonAttributes = {
      a: {
        class: [mainClass, buttonInlineModifier, textDecorationModifier],
        href: `./${link}.html`,
      },
      button: {
        class: [mainClass, buttonInlineModifier],
        type: type,
        disabled: disabled,
      }
    }

  #{buttonTag}&attributes(buttonAttributes[buttonTag])
    span.button__inner(
      class=[textColorModifier, buttonSizeModifier, buttonFillModifier ]
    ) #{buttonName}
    if buttonVariation === 'withArrow'
      span.button__arrow