mixin button({ classList=[], type="button", buttonName="button", link="", size="inline", textColor="gray", buttonVariation="inline", focused=false })
  -
    const mainClass = "button"
    const sizeClassModifier = `button_${size}`
    const textClassModifier = `button__text_${textColor}`
    const focusedClassModifier = focused ? "button_focused" : ""
    
    const buttonAttributes = {
      link: {
        class: [ mainClass, sizeClassModifier, focusedClassModifier ],
        href: `./${link}.html`,
      },
      button: {
        class: [ mainClass, sizeClassModifier, focusedClassModifier ],
        type: type,
      }
    }

  if link
    a&attributes(buttonAttributes.link) 
      case buttonVariation
        when "fillWhite"
          span.button__text(class=textClassModifier) #{buttonName}
          span.button__fill.button__fill_white
        when "withArrow"
          span.button__text(class=textClassModifier) #{buttonName}
          span.button__arrow
        default
          span.button__text(class=textClassModifier) #{buttonName}
  else
    button&attributes(buttonAttributes.button) 
      case buttonVariation
        when "fillWhite"
          span.button__text(class=textClassModifier) #{buttonName}
          span.button__fill.button__fill_white
        when "withArrow"
          span.button__text(class=textClassModifier) #{buttonName}
          span.button__arrow
        default
          span.button__text(class=textClassModifier) #{buttonName}