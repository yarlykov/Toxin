mixin button({ type="button", buttonName="button", link="", size="", textColor="gray", buttonVariation="", disabled=false } = {})
  -
    const mainClass = "button"
    const buttonSizeModifier = size ? `button__inner_size_${size}` : ""
    const textColorModifier = `button__inner_text-color_${textColor}`
    const buttonInlineModifier = buttonVariation === "inline" ? "button_inline" : ""
    const buttonFillModifier = buttonVariation === "fillWhite" ? "button__inner_fill_white" : ""
    const textDecorationModifier = "button_no-text-decoration"
    
    const buttonAttributes = {
      link: {
        class: [mainClass, buttonInlineModifier, textDecorationModifier],
        href: `./${link}.html`,
      },
      button: {
        class: [mainClass, buttonInlineModifier],
        type: type,
        disabled: disabled,
      }
    }

  if link
    a&attributes(buttonAttributes.link) 
      case buttonVariation
        when "fillWhite"
          span.button__inner(class=[textColorModifier, buttonSizeModifier, buttonFillModifier]) #{buttonName}
        when "withArrow"
          span.button__inner(class=[textColorModifier, buttonSizeModifier ]) #{buttonName}
          span.button__arrow
        default
          span.button__inner(class=[textColorModifier, buttonSizeModifier ]) #{buttonName}
  else
    button&attributes(buttonAttributes.button) 
      case buttonVariation
        when "fillWhite"
          span.button__inner(class=[textColorModifier, buttonSizeModifier, buttonFillModifier]) #{buttonName}
        when "withArrow"
          span.button__inner(class=[textColorModifier, buttonSizeModifier]) #{buttonName}
          span.button__arrow
        default
          span.button__inner(class=[textColorModifier, buttonSizeModifier ]) #{buttonName}